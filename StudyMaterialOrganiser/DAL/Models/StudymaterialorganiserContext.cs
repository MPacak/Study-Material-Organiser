// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DAL.Models;

public partial class StudymaterialorganiserContext : DbContext
{
    public StudymaterialorganiserContext(DbContextOptions<StudymaterialorganiserContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Material> Materials { get; set; }

    public virtual DbSet<MaterialTag> MaterialTags { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserGroup> UserGroups { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Group>(entity =>
        {
            entity.ToTable("Group");

            entity.HasIndex(e => e.Name, "UQ_Group_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Tag).WithMany(p => p.Groups)
                .HasForeignKey(d => d.TagId)
                .HasConstraintName("FK_Group_Tag");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.ToTable("Log");

            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Material>(entity =>
        {
            entity.HasKey(e => e.Idmaterial);

            entity.ToTable("Material");

            entity.Property(e => e.Idmaterial).HasColumnName("IDMaterial");
            entity.Property(e => e.FilePath)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.FolderTypeId).HasColumnName("FolderTypeID");
            entity.Property(e => e.Link).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<MaterialTag>(entity =>
        {
            entity.HasKey(e => e.IdmaterialTag);

            entity.ToTable("MaterialTag");

            entity.Property(e => e.IdmaterialTag).HasColumnName("IDMaterialTag");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
            entity.Property(e => e.TagId).HasColumnName("TagID");

            entity.HasOne(d => d.Material).WithMany(p => p.MaterialTags)
                .HasForeignKey(d => d.MaterialId)
                .HasConstraintName("FK_Material");

            entity.HasOne(d => d.Tag).WithMany(p => p.MaterialTags)
                .HasForeignKey(d => d.TagId)
                .HasConstraintName("FK_Tag");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Idtag);

            entity.ToTable("Tag");

            entity.Property(e => e.Idtag).HasColumnName("IDTag");
            entity.Property(e => e.TagName)
                .IsRequired()
                .HasMaxLength(150);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ_User_Email").IsUnique();

            entity.HasIndex(e => e.Username, "UQ_User_Username").IsUnique();

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Phone).HasMaxLength(256);
            entity.Property(e => e.PwdHash)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.PwdSalt)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.SecurityToken)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UserGroup>(entity =>
        {
            entity.ToTable("UserGroup");

            entity.HasOne(d => d.Group).WithMany(p => p.UserGroups)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("FK_UserGroup_Group");

            entity.HasOne(d => d.User).WithMany(p => p.UserGroups)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserGroup_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}